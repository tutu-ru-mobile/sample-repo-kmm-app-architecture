buildscript {
    repositories {
        google()
        jcenter()
//        maven { setUrl("https://dl.bintray.com/kotlin/kotlin-eap") }
//        maven { setUrl("https://dl.bintray.com/kotlin/kotlin-dev") }
    }
    dependencies {
        String buildJetPackCompose = System.properties["buildJetPackCompose"]
        if (buildJetPackCompose == "true") {
            println("buildJetPackCompose: ${buildJetPackCompose}")
            classpath("com.android.tools.build:gradle:4.2.0-alpha08")
        } else {
            classpath("com.android.tools.build:gradle:4.1.0-rc02")
        }
//        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.0")
    }
}

plugins {
    id("org.jetbrains.kotlin.multiplatform") version "1.4.0" apply false
//    kotlin("multiplatform") version "1.4.0" apply false
    id("com.gradleup.auto.manifest") version "1.0.2"
}


autoManifest {
    packageName.set("com.sample")
    replaceDashesWithDot.set(true)
}

allprojects {
    repositories {
        //mavenLocal()
        google()
        jcenter()
        maven {
            setUrl("https://dl.bintray.com/kotlin/kotlinx")
        }
//        maven { setUrl("https://dl.bintray.com/kotlin/kotlin-eap") }
//        maven { setUrl("https://dl.bintray.com/kotlin/kotlin-dev") }
    }
//    tasks.withType(AbstractTestTask::class) {
//        testLogging {
//            showStandardStreams = true
//            events("passed", "failed")
//        }
//    }
//    tasks.withType < org.jetbrains.kotlin.gradle.tasks.KotlinCompile > {
//        kotlinOptions.jvmTarget = "1.8"
//        kotlinOptions.freeCompilerArgs += listOf("-Xallow-jvm-ir-dependencies", "-Xskip-prerelease-check")
//    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = "1.8"
            allWarningsAsErrors = false
            freeCompilerArgs += "-Xallow-jvm-ir-dependencies"
            // Opt-in to experimental compose APIs
//            freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
//            useIR = true
//            freeCompilerArgs += "-Xuse-ir"
//            freeCompile

        }
    }
}
